
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Loader2, Download, RefreshCcw, FileText } from "lucide-react";
import { generateResource } from "@/lib/api";
import { useToast } from "@/hooks/use-toast";
import ReactMarkdown from "react-markdown";
import html2pdf from 'html-to-pdf-js';
import { Badge } from "@/components/ui/badge";

const resourceTypes = [
  {
    value: "anxiety-coping",
    label: "Anxiety Coping Strategies",
  },
  {
    value: "depression-management",
    label: "Depression Management",
  },
  {
    value: "stress-reduction",
    label: "Stress Reduction Techniques",
  },
  {
    value: "mindfulness-exercises",
    label: "Mindfulness Exercises",
  },
  {
    value: "sleep-improvement",
    label: "Sleep Improvement",
  },
  {
    value: "self-care-routines",
    label: "Self-Care Routines",
  },
  {
    value: "emotional-regulation",
    label: "Emotional Regulation",
  },
  {
    value: "custom",
    label: "Custom Resource",
  },
];

const ResourceGenerator = () => {
  const [selectedResourceType, setSelectedResourceType] = useState("");
  const [userConcern, setUserConcern] = useState("");
  const [customPrompt, setCustomPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedResource, setGeneratedResource] = useState("");
  const { toast } = useToast();

  const handleGenerateResource = async () => {
    if (!selectedResourceType) {
      toast({
        description: "Please select a resource type.",
        variant: "destructive",
      });
      return;
    }

    if (selectedResourceType === "custom" && !customPrompt) {
      toast({
        description: "Please enter a custom prompt.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);

    try {
      let resource;
      
      if (selectedResourceType === "custom") {
        // Generate resource based on custom prompt
        resource = await generateResource(customPrompt);
      } else {
        // Generate resource based on selected type
        const selectedType = resourceTypes.find(
          (type) => type.value === selectedResourceType
        )?.label;

        if (!selectedType) return;

        resource = await generateResource(
          selectedType,
          userConcern || undefined
        );
      }

      setGeneratedResource(resource);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate resource. Please try again.",
        variant: "destructive",
      });
      console.error("Resource generation error:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadResource = () => {
    if (!generatedResource) return;

    const element = document.getElementById('resource-content');
    if (!element) return;

    let filename;
    if (selectedResourceType === "custom") {
      filename = "custom-resource.pdf";
    } else {
      const selectedTypeLabel = resourceTypes.find(
        (type) => type.value === selectedResourceType
      )?.label;
      filename = `${
        selectedTypeLabel?.toLowerCase().replace(/\s+/g, "-") || "resource"
      }.pdf`;
    }

    // Add styling for PDF
    const opt = {
      margin: 1,
      filename: filename,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
    };

    // Create a clone of the element with proper styling for PDF
    const contentClone = element.cloneNode(true) as HTMLElement;
    const container = document.createElement('div');
    container.className = 'pdf-content';
    
    // Add title
    const title = document.createElement('h1');
    title.style.fontSize = '24px';
    title.style.marginBottom = '20px';
    title.style.fontWeight = 'bold';
    title.style.color = '#14b8a6';
    title.style.fontFamily = 'Inter, sans-serif';
    title.innerText = selectedResourceType === "custom" 
      ? "Custom Resource" 
      : resourceTypes.find(type => type.value === selectedResourceType)?.label || "Generated Resource";
    
    container.appendChild(title);
    
    // Add logo/branding
    const branding = document.createElement('p');
    branding.style.fontSize = '12px';
    branding.style.marginBottom = '20px';
    branding.style.color = '#6c6c6c';
    branding.innerText = "Generated by EchoComfort AI Assistant";
    container.appendChild(branding);
    
    // Add content
    container.appendChild(contentClone);
    
    // Add date
    const date = document.createElement('p');
    date.style.fontSize = '10px';
    date.style.marginTop = '30px';
    date.style.color = '#9f9f9f';
    date.innerText = `Generated on ${new Date().toLocaleDateString()}`;
    container.appendChild(date);
    
    // Create temporary div for PDF generation
    const tempDiv = document.createElement('div');
    tempDiv.style.padding = '30px';
    tempDiv.appendChild(container);
    document.body.appendChild(tempDiv);
    
    html2pdf().set(opt).from(tempDiv).save().then(() => {
      document.body.removeChild(tempDiv);
      toast({
        description: "Resource downloaded as PDF",
      });
    });
  };

  const resetForm = () => {
    setSelectedResourceType("");
    setUserConcern("");
    setCustomPrompt("");
    setGeneratedResource("");
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-7 gap-6">
      <Card className="col-span-1 md:col-span-2 shadow-md">
        <CardHeader className="bg-muted/30 border-b rounded-t-lg">
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-primary" />
            Generate a Resource
          </CardTitle>
          <CardDescription>
            Select a resource type and optionally describe your concern to get
            personalized content.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4 pt-6">
          <div className="space-y-2">
            <label
              htmlFor="resource-type"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Resource Type
            </label>
            <Select
              value={selectedResourceType}
              onValueChange={setSelectedResourceType}
            >
              <SelectTrigger id="resource-type" className="focus:ring-primary">
                <SelectValue placeholder="Select resource type" />
              </SelectTrigger>
              <SelectContent>
                {resourceTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {selectedResourceType === "custom" ? (
            <div className="space-y-2">
              <label
                htmlFor="custom-prompt"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Custom Prompt
              </label>
              <Input
                id="custom-prompt"
                placeholder="E.g., Create a guide for managing social anxiety at work"
                value={customPrompt}
                onChange={(e) => setCustomPrompt(e.target.value)}
                className="focus-visible:ring-primary"
              />
            </div>
          ) : (
            <div className="space-y-2">
              <label
                htmlFor="concern"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Your Concern (Optional)
              </label>
              <Input
                id="concern"
                placeholder="E.g., work stress, social anxiety"
                value={userConcern}
                onChange={(e) => setUserConcern(e.target.value)}
                className="focus-visible:ring-primary"
              />
            </div>
          )}
        </CardContent>
        <CardFooter className="flex flex-col gap-2 border-t bg-muted/10 pt-4">
          <Button
            className="w-full gap-1"
            onClick={handleGenerateResource}
            disabled={isGenerating || !selectedResourceType}
          >
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              "Generate Resource"
            )}
          </Button>
          {generatedResource && (
            <Button
              className="w-full gap-1"
              variant="outline"
              onClick={resetForm}
            >
              <RefreshCcw className="h-4 w-4 mr-2" />
              Create Another
            </Button>
          )}
        </CardFooter>
      </Card>

      <Card className="col-span-1 md:col-span-5 shadow-md">
        <CardHeader className="flex flex-row items-center justify-between bg-muted/30 border-b rounded-t-lg">
          <div>
            <CardTitle className="flex items-center gap-2">
              {generatedResource
                ? selectedResourceType === "custom"
                  ? "Custom Resource"
                  : resourceTypes.find((type) => type.value === selectedResourceType)
                      ?.label || "Generated Resource"
                : "Resource Preview"}
            </CardTitle>
            <CardDescription>
              {generatedResource
                ? "Your personalized resource is ready."
                : "Generated content will appear here."}
            </CardDescription>
          </div>
          {generatedResource && (
            <Button
              size="sm"
              variant="outline"
              onClick={handleDownloadResource}
              className="ml-auto gap-2 hover:bg-primary hover:text-primary-foreground transition-colors"
            >
              <Download className="h-4 w-4" />
              Download PDF
            </Button>
          )}
        </CardHeader>
        <CardContent className="p-0">
          <ScrollArea className="h-[500px] rounded-b-lg p-6">
            {isGenerating ? (
              <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                <Loader2 className="h-8 w-8 animate-spin mb-2" />
                <p>Generating your personalized resource...</p>
                <p className="text-sm">This may take a moment.</p>
              </div>
            ) : generatedResource ? (
              <div id="resource-content" className="prose prose-sm max-w-none dark:prose-invert prose-headings:text-primary prose-a:text-primary">
                <ReactMarkdown>{generatedResource}</ReactMarkdown>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground p-6">
                <FileText className="h-12 w-12 text-muted-foreground/50 mb-4" />
                <p className="mb-2 font-medium">Select a resource type and click "Generate Resource"</p>
                <p className="text-sm">
                  Your personalized mental health resource will appear here.
                </p>
                <div className="flex flex-wrap gap-2 mt-6 justify-center max-w-md">
                  {resourceTypes.slice(0, -1).map((type) => (
                    <Badge 
                      key={type.value} 
                      variant="outline" 
                      className="cursor-pointer hover:bg-primary/10 transition-colors"
                      onClick={() => setSelectedResourceType(type.value)}
                    >
                      {type.label}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};

export default ResourceGenerator;
